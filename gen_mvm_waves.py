# Generate MVM waves with harbingers and such
# The actual .pop file has tons of redundancy, which means editing it is tedious.

STARTING_MONEY = 1508 # I use a weird value here so that versioning becomes easy
WAVE_MONEY = 500 # Money from regular waves
HARBINGER_MONEY = 100 # Money from the harbingers in tank waves
TANK_MONEY = 500 # Money from the tanks themselves
SUPPORT_MONEY = 100 # Total money spread across all support bots of each type

# Don't know what of this would be different for different maps
PREAMBLE = """//This file was generated by gen_mvm_waves.py
#base robot_giant.pop
#base robot_standard.pop
#base robot_gatebot.pop
population
{
	StartingCurrency	%d
	RespawnWaveTime		6
	CanBotsAttackWhileInSpawnRoom	no
	Templates
	{
		T_TFBot_Heavy
		{
			Health	300
			Name	Heavy
			Class	HeavyWeapons
			Skill	Normal
			Item	"tf_weapon_minigun"
			Item	"tf_weapon_shotgun_hwg"
			Item	"tf_weapon_fists"
		}
		BOSS_ReflectMe
		{
			Health	200000
			Name	"Reflect Me"
			Class	Soldier
			Skill	Normal
			WeaponRestrictions	PrimaryOnly
			Attributes	"AlwaysCrit"
			Attributes	"MiniBoss"
			Item	"the original"
			Item	"tf_weapon_shotgun_soldier"
			Item	"tf_weapon_shovel"
			CharacterAttributes
			{
				"Projectile speed decreased"	0.75
				"damage bonus"			10
				"dmg falloff decreased"		1
				"move speed penalty"		0.15
				"airblast vulnerability multiplier"	0
			}
		}
	}"""

total_money = STARTING_MONEY

class Wave:
	def __enter__(self):
		print("""	Wave
	{
		WaitWhenDone	65
		Checkpoint	Yes
		StartWaveOutput
		{
			Target	wave_start_relay
			Action	Trigger
		}
		DoneOutput
		{
			Target	wave_finished_relay
			Action	Trigger
		}""", file=pop)
		self.money = 0
	def __exit__(self, t, v, tb):
		print("	}", file=pop)
		# The maximum possible money after a wave includes a 100-credit bonus.
		global total_money; total_money += self.money + 100
		print("Wave money:", self.money, "+ 100 ==> cumulative", total_money)
wave = Wave()

def subwave(botclass, count, *, max_active=5, spawn_count=2, money=WAVE_MONEY):
	print("""		WaveSpawn
		{
			TotalCurrency	%d
			TotalCount	%d
			MaxActive	%d
			SpawnCount	%d
			Where	spawnbot
			WaitBeforeStarting	0
			WaitBetweenSpawns	10
			Squad
			{
				TFBot
				{
					Template	%s
				}
			}
		}""" % (money, count, max_active, spawn_count, botclass), file=pop)
	wave.money += money

def harby_tanks(count):
	# TODO: Make the names unique within a wave, such that calling
	# this function more than once results in parallel chains of
	# harbingers and tanks (muahahahahaha)
	for i in range(count):
		# Add the harbinger. The first one is a little bit different.
		print("""		WaveSpawn
		{
			Name	"Harbinger %d"
			%s
			TotalCurrency	%d
			TotalCount	1
			MaxActive	5
			SpawnCount	2
			Where	spawnbot
			WaitBeforeStarting	%d
			WaitBetweenSpawns	10
			Squad
			{
				TFBot
				{
					Health	500
					Name	Soldier
					Class	Soldier
					Skill	Normal
					Item	"tf_weapon_rocketlauncher"
					Item	"tf_weapon_shotgun_soldier"
					Item	"tf_weapon_shovel"
				}
			}
		}""" % (
			i + 1,
			'WaitForAllDead	"Harbinger %d"' % i if i else '',
			HARBINGER_MONEY,
			30 if i else 0
		), file=pop)
		# And add the tank itself.
		print("""		WaveSpawn
		{
			Name	"Tank %d"
			WaitForAllDead	"Harbinger %d"
			TotalCurrency	%d
			TotalCount	1
			MaxActive	5
			SpawnCount	2
			Where	spawnbot
			WaitBeforeStarting	0
			WaitBetweenSpawns	30
			Squad
			{
				Tank
				{
					Health	40000
					Name	Tank
					Speed	75
					StartingPathTrackNode	boss_path_1
					OnKilledOutput
					{
						Target	boss_dead_relay
						Action	Trigger
					}
					OnBombDroppedOutput
					{
						Target	boss_deploy_relay
						Action	Trigger
					}
				}
			}
		}""" % (i+1, i+1, TANK_MONEY), file=pop)
		wave.money += HARBINGER_MONEY + TANK_MONEY

def support(*botclasses):
	for botclass in botclasses:
		print("""		WaveSpawn
		{
			TotalCurrency	%d
			TotalCount	10
			MaxActive	5
			SpawnCount	2
			Where	spawnbot
			WaitBeforeStarting	0
			WaitBetweenSpawns	10
			Support	1
			Squad
			{
				TFBot
				{
					Template	%s
				}
			}
		}""" % (SUPPORT_MONEY, botclass), file=pop)
		wave.money += SUPPORT_MONEY

with open("mvm_coaltown.pop", "w") as pop:
	print("Starting money:", STARTING_MONEY)
	print(PREAMBLE % STARTING_MONEY, file=pop)
	with wave:
		subwave("T_TFBot_Heavy", 25, max_active=10, spawn_count=5, money=250)
		subwave("T_TFBot_Scout_Fish", 10, money=100)
		subwave("T_TFBot_Demoman", 15, money=150)
		subwave("T_TFBot_Pyro", 5, money=50)
	with wave:
		harby_tanks(1)
		support("T_TFBot_Scout_Scattergun_SlowFire")
	with wave:
		harby_tanks(2)
		subwave("T_TFBot_Demoman", 10)
		support("T_TFBot_Heavy", "T_TFBot_Sniper")
	with wave:
		harby_tanks(5)
		subwave("T_TFBot_Sniper", 25, max_active=10, spawn_count=5)
		support("T_TFBot_Pyro", "T_TFBot_Demoman")
	with wave:
		subwave("BOSS_ReflectMe", 1)
		support("T_TFBot_Sniper_Huntsman", "T_TFBot_Demoman_Knight")
	print("}", file=pop)
	print("Total money after all waves:", total_money)
